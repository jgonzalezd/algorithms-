# -----------------------------------------------
# BACKUP / LEGACY DOCKERFILE (build errors inside)
# This file is kept for reference. The build is
# known to fail at the Python (pyenv) installation
# step. A new multi-stage Dockerfile replaces this
# file as the main dev-container specification.
# -----------------------------------------------

FROM ubuntu:22.04

# Avoid warnings by switching to noninteractive
ENV DEBIAN_FRONTEND=noninteractive

# Set version arguments for better maintainability
ARG RUBY_VERSION=3.2.0
ARG PYTHON_VERSION=3.11.0
ARG NODE_VERSION=18.17.0

# Configure apt and install packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        git \
        curl \
        wget \
        build-essential \
        libssl-dev \
        libreadline-dev \
        zlib1g-dev \
        libbz2-dev \
        libsqlite3-dev \
        libffi-dev \
        liblzma-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libgdbm-dev \
        libnss3-dev \
        libtinfo5 \
        libgdbm6 \
        libdb-dev \
        libyaml-dev \
        vim \
        sudo \
        ca-certificates \
        gnupg \
        software-properties-common \
    # Clean up
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user with limited sudo access
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Switch to non-root user
USER $USERNAME
WORKDIR /home/$USERNAME

# Install RVM for Ruby version management with better error handling
SHELL ["/bin/bash", "-lc"]
RUN gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \
    && curl -sSL https://get.rvm.io | bash -s stable \
    && source ~/.rvm/scripts/rvm \
    && rvm autolibs disable \
    && rvm install ${RUBY_VERSION} --disable-binary \
    && rvm use ${RUBY_VERSION} --default \
    && gem install bundler

# Install pyenv for Python version management
RUN curl https://pyenv.run | bash \
    && echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc \
    && echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc \
    && echo 'eval "$(pyenv init -)"' >> ~/.bashrc \
    && source ~/.bashrc \
    && pyenv install ${PYTHON_VERSION} \
    && pyenv global ${PYTHON_VERSION} \
    && pip install --upgrade pip

# Install nvm for Node.js version management
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash \
    && echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc \
    && echo '[ -s "$NVM_DIR/nvm.sh" ] && \\ . "$NVM_DIR/nvm.sh"' >> ~/.bashrc \
    && echo '[ -s "$NVM_DIR/bash_completion" ] && \\ . "$NVM_DIR/bash_completion"' >> ~/.bashrc \
    && source ~/.bashrc \
    && nvm install ${NODE_VERSION} \
    && nvm use ${NODE_VERSION} \
    && nvm alias default ${NODE_VERSION} \
    && npm config set prefix ~/.npm-global \
    && echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc \
    && npm install -g typescript ts-node @types/node

# Configure environment and paths
RUN echo 'source ~/.rvm/scripts/rvm' >> ~/.bashrc \
    && echo "rvm use ${RUBY_VERSION} --default" >> ~/.bashrc \
    && echo 'export PATH=$HOME/.rvm/bin:$PATH' >> ~/.bashrc

# Add version switching helpers
RUN echo 'alias switch-ruby="echo \"Available: \$(rvm list | grep -E \"^=\\|^=>\" | awk \"{print \\\$1}\" | tr \"\\n\" \" \"); echo \"Usage: rvm use <version>\""' >> ~/.bashrc \
    && echo 'alias switch-python="echo \"Available: \$(pyenv versions | tr \"\\n\" \" \"); echo \"Usage: pyenv global <version>\""' >> ~/.bashrc \
    && echo 'alias switch-node="echo \"Available: \$(nvm list | grep -E \"->|default\" | awk \"{print \\\$1}\" | tr \"\\n\" \" \"); echo \"Usage: nvm use <version>\""' >> ~/.bashrc

# Set up the working directory
WORKDIR /workspace

# Add health check for all three languages
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ruby --version && python --version && node --version || exit 1

CMD ["/bin/bash"]
